{"version":3,"file":"index.js","mappings":"mBACA,IAAIA,EAAsB,CAAC,ECD3BA,EAAoBC,EAAI,WACvB,GAA0B,iBAAfC,WAAyB,OAAOA,WAC3C,IACC,OAAOC,MAAQ,IAAIC,SAAS,cAAb,EAChB,CAAE,MAAOC,GACR,GAAsB,iBAAXC,OAAqB,OAAOA,MACxC,CACA,CAPuB,G,MCAxB,IAAIC,EACAP,EAAoBC,EAAEO,gBAAeD,EAAYP,EAAoBC,EAAEQ,SAAW,IACtF,IAAIC,EAAWV,EAAoBC,EAAES,SACrC,IAAKH,GAAaG,IACbA,EAASC,eAAkE,WAAjDD,EAASC,cAAcC,QAAQC,gBAC5DN,EAAYG,EAASC,cAAcG,MAC/BP,GAAW,CACf,IAAIQ,EAAUL,EAASM,qBAAqB,UAC5C,GAAGD,EAAQE,OAEV,IADA,IAAIC,EAAIH,EAAQE,OAAS,EAClBC,GAAK,KAAOX,IAAc,aAAaY,KAAKZ,KAAaA,EAAYQ,EAAQG,KAAKJ,GAE3F,CAID,IAAKP,EAAW,MAAM,IAAIa,MAAM,yDAChCb,EAAYA,EAAUc,QAAQ,OAAQ,IAAIA,QAAQ,QAAS,IAAIA,QAAQ,YAAa,KACpFrB,EAAoBsB,EAAIf,C,SCfxB,IAAIgB,EAAe,KACfC,EAAiB,KACjBC,EAAW,KACXC,GAAY,EAqBhB,SAASC,EAAWC,EAAcC,GAC9B,GAAIJ,EAAU,CACV,IAAMK,EAAcP,EAAaO,YACjCL,EAASM,KAAKC,sBAAsBF,GACpCL,EAASM,KAAKE,eAAeR,EAASM,KAAKG,MAAOJ,GAClDL,EAASM,KAAKI,wBAAwBP,EAAcE,EAAcD,EACtE,CACJ,CAGA,SAASO,IACL,IA3BMC,EACFC,EA0BEC,EAAc7B,SAAS8B,eAAe,eAEvCd,GAqBDC,EAAW,EAAG,IACdc,YAAW,WACHjB,GAAgBA,EAAekB,aAC/BjB,GAAUA,EAASiB,aACvBjB,EAAW,KACXD,EAAiB,IACrB,GAAG,KACHe,EAAYI,YAAc,kBA1BrBpB,IACDA,EAAe,IAAKjB,OAAOsC,cAAgBtC,OAAOuC,qBAGjDrB,IAnCHa,EAoCoCd,EApCpBuB,sBADH,KACqC,EAAG,GACvDR,EAAU,EAEdD,EAAKU,eAAiB,SAAU1C,GAE5B,IADA,IAAM2C,EAAS3C,EAAE4C,aAAaC,eAAe,GACpChC,EAAI,EAAGA,EAND,KAMiBA,IAAK,CACjC,IAAMiC,EAAwB,EAAhBC,KAAKC,SAAe,EAClCL,EAAO9B,IAAMoB,EAAU,IAAOa,GAAS,KACvCb,EAAUU,EAAO9B,GACjB8B,EAAO9B,IAAM,CACjB,CACJ,EAyBQM,EAxBDa,GA2BEZ,KACDA,EAAWF,EAAa+B,cACfvB,KAAKE,eAAe,EAAGV,EAAaO,aAC7CN,EAAe+B,QAAQ9B,GAAU8B,QAAQhC,EAAaiC,cAI1D7B,EAAW,EAAG,IACdY,EAAYI,YAAc,kBAa9BjB,GAAaA,CACjB,CAGAhB,SAAS+C,iBAAiB,oBAAoB,WACtB/C,SAAS8B,eAAe,eAChCiB,iBAAiB,QAASrB,EAC1C,G","sources":["webpack://static-site-boilerplate/webpack/bootstrap","webpack://static-site-boilerplate/webpack/runtime/global","webpack://static-site-boilerplate/webpack/runtime/publicPath","webpack://static-site-boilerplate/./src/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","import './index.css'\nimport jpg from './images/image.jpg'\n\nlet audioContext = null;\nlet brownNoiseNode = null;\nlet gainNode = null;\nlet isPlaying = false;\n\n// Функция для создания коричневого шума\nfunction createBrownNoise(audioCtx) {\n    const bufferSize = 4096;\n    const node = audioCtx.createScriptProcessor(bufferSize, 1, 1);\n    let lastOut = 0.0;\n\n    node.onaudioprocess = function (e) {\n        const output = e.outputBuffer.getChannelData(0);\n        for (let i = 0; i < bufferSize; i++) {\n            const white = Math.random() * 2 - 1; // Генерация белого шума\n            output[i] = (lastOut + 0.03 * white) / 1.03; // Преобразование в коричневый шум\n            lastOut = output[i];\n            output[i] *= 2; // Увеличение громкости\n        }\n    };\n    return node;\n}\n\n// Функция плавного изменения громкости\nfunction fadeVolume(targetVolume, duration) {\n    if (gainNode) {\n        const currentTime = audioContext.currentTime;\n        gainNode.gain.cancelScheduledValues(currentTime);\n        gainNode.gain.setValueAtTime(gainNode.gain.value, currentTime);\n        gainNode.gain.linearRampToValueAtTime(targetVolume, currentTime + duration);\n    }\n}\n\n// Функция для управления шумом\nfunction toggleNoise() {\n    const noiseButton = document.getElementById(\"noiseButton\");\n\n    if (!isPlaying) {\n        // Включение звука\n        if (!audioContext) {\n            audioContext = new (window.AudioContext || window.webkitAudioContext)();\n        }\n\n        if (!brownNoiseNode) {\n            brownNoiseNode = createBrownNoise(audioContext);\n        }\n\n        if (!gainNode) {\n            gainNode = audioContext.createGain();\n            gainNode.gain.setValueAtTime(0, audioContext.currentTime); // Начальная громкость = 0\n            brownNoiseNode.connect(gainNode).connect(audioContext.destination);\n        }\n\n        // Плавное увеличение громкости до 1 за 2 секунды\n        fadeVolume(1, 0.4);\n        noiseButton.textContent = \"выключить звук\";\n    } else {\n        // Выключение звука\n        fadeVolume(0, 0.4); // Плавное уменьшение громкости до 0 за 2 секунды\n        setTimeout(() => {\n            if (brownNoiseNode) brownNoiseNode.disconnect();\n            if (gainNode) gainNode.disconnect();\n            gainNode = null;\n            brownNoiseNode = null;\n        }, 2000); // Отключаем узлы после завершения затухания\n        noiseButton.textContent = \"включить звук\";\n    }\n\n    isPlaying = !isPlaying;\n}\n\n// Привязываем обработчик событий к кнопке\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    const noiseButton = document.getElementById(\"noiseButton\");\n    noiseButton.addEventListener(\"click\", toggleNoise);\n});\n"],"names":["__webpack_require__","g","globalThis","this","Function","e","window","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","audioContext","brownNoiseNode","gainNode","isPlaying","fadeVolume","targetVolume","duration","currentTime","gain","cancelScheduledValues","setValueAtTime","value","linearRampToValueAtTime","toggleNoise","node","lastOut","noiseButton","getElementById","setTimeout","disconnect","textContent","AudioContext","webkitAudioContext","createScriptProcessor","onaudioprocess","output","outputBuffer","getChannelData","white","Math","random","createGain","connect","destination","addEventListener"],"sourceRoot":""}